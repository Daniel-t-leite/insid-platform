import sqlite3
import streamlit as st
import re
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, ColumnsAutoSizeMode, JsCode
# import logging
import os
import time
from datetime import datetime


from db import (
    conectar_db, criar_usuario, verificar_credenciais, email_existe,
    obter_proximo_codigo_usuario, obter_tipos_barragem, 
    definir_barragem_analise, obter_barragem_analise, 
    obter_barragens_usuario, atualizar_barragem, excluir_barragem, 
    cadastrar_barragem, listar_usuarios, atualizar_status_usuario, 
    atualizar_admin_usuario, excluir_usuario, obter_zonas_por_barragem,
    cadastrar_zona_db, obter_todos_materiais, cadastrar_material_db, 
    obter_material_por_id, excluir_material_db, obter_materiais_por_usuario
 
)

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Sistema inSID", page_icon="üîê", layout="wide")

def pagina_principal():
    """P√°gina principal ap√≥s login com gest√£o completa de barragens"""
    st.title("üìä P√°gina Inicial - Sistema inSID")
    st.write(f"üë§ Usu√°rio logado: {st.session_state['usuario_nome']}")
    
    # Barra de sele√ß√£o de barragem em an√°lise
    st.subheader("üîç Barragem em An√°lise")
    barragens_usuario = obter_barragens_usuario(st.session_state['usuario_id'])
    barragem_analise = obter_barragem_analise(st.session_state['usuario_id'])

    if barragem_analise:
        st.success(f"Barragem atual em an√°lise:  [id: {barragem_analise[0]}] - {barragem_analise[2]}")

    else:
        st.warning("Nenhuma barragem selecionada para an√°lise")
    
    if barragens_usuario:
        # Seleciona a barragem atual em an√°lise ou vazio se nenhuma
        barragem_selecionada = str(barragem_analise[0]) if barragem_analise else ""
        
        # Cria lista de op√ß√µes para o selectbox
        opcoes_barragens = {str(b[0]): f"{b[1]} (ID: {b[0]})" for b in barragens_usuario}
        opcoes_barragens[""] = "Selecione uma barragem..."
        
              
        # Widget para sele√ß√£o/edi√ß√£o da barragem em an√°lise
        col1, col2 = st.columns([3, 1])
        with col1:
            nova_barragem = st.selectbox(
                "Selecione a barragem para an√°lise:",
                options=opcoes_barragens.keys(),
                format_func=lambda x: opcoes_barragens.get(x, "Selecione..."),
                index=list(opcoes_barragens.keys()).index(barragem_selecionada) if barragem_selecionada else 0
            )
        
        with col2:
            st.write("")  # Espa√ßamento
            st.write("")  # Espa√ßamento
            if st.button("üíæ Salvar Sele√ß√£o"):
                if nova_barragem:
                    definir_barragem_analise(st.session_state['usuario_id'], int(nova_barragem))
                    st.success(f"Barragem {opcoes_barragens[nova_barragem]} definida para an√°lise!")
                    st.rerun()
                else:
                    st.error("Selecione uma barragem v√°lida")

        # Mostra detalhes da barragem em an√°lise
        if barragem_analise:
            with st.expander("üìù Editar Barragem"):
                editar_barragem(barragem_analise)
  
    else:
        st.warning("Voc√™ ainda n√£o cadastrou nenhuma barragem")
    
    # Se√ß√£o de a√ß√µes principais
    st.subheader("üìã A√ß√µes")
    col1, col2, col3 = st.columns(3)
    
    with col2:  
        if st.button("üîç Identificar Modos de Falha"):
            if barragem_analise:
                st.session_state['pagina'] = "identificacao_falhas"
                st.rerun()
            else:
                st.error("Selecione uma barragem para an√°lise primeiro")

    
    # Se√ß√£o de administra√ß√£o (se for admin)
    if st.session_state.get('is_admin'):
        st.sidebar.subheader("üõ°Ô∏è Administra√ß√£o")
        if st.sidebar.button("üë• Gerenciar Usu√°rios"):
            st.session_state['pagina'] = "admin_usuarios"
            st.rerun()
    
    if st.sidebar.button("‚ûï Cadastrar Nova Barragem"):
        st.session_state['pagina'] = "cadastro_barragem"
        st.rerun()

    # Bot√£o de logout
    st.sidebar.button("üö™ Sair", on_click=logout)

def pagina_cadastro_barragem():
    """P√°gina para cadastro de novas barragens com navega√ß√£o por abas (para administradores)"""
    st.title("üìù Cadastro de barragens")

    # ========== MENU SUPERIOR COM st.tabs (RESTRITO A ADMINISTRADORES) ==========
    if st.session_state.get('is_admin', False):
        tab1, tab2, tab3, tab4 = st.tabs(["üè† Cadastro de barragens", "Categoria de barragens", "Zonas da barragem", "Cadastro avan√ßado"])

        with tab1:
            # Conte√∫do padr√£o da p√°gina de cadastro
            exibir_formulario_cadastro_barragem()

        with tab2:
            listar_tipos_barragem()
            adicionar_tipo_barragem()
        
        with tab3:
            gerenciar_zonas_barragem()
            #gerenciar_tipos_materiais()

        with tab4:
            st.info("Se√ß√£o de cadastro avan√ßado ‚Äî campos t√©cnicos extras")
            # Aqui voc√™ pode adicionar campos extras ou formul√°rio diferenciado
            #exibir_formulario_avancado()
    
    else:
        # Usu√°rio comum v√™ diretamente o formul√°rio b√°sico
        exibir_formulario_cadastro_barragem()

def gerenciar_zonas_barragem():
    """P√°gina principal para gerenciamento de zonas"""
    st.title("üèóÔ∏è Gerenciamento de Zonas de Barragem")
    
    # Verifica se est√° no modo de edi√ß√£o
    if st.session_state.get('pagina') == "editar_zona":
        editar_zona_barragem()
        return
    
    # Restante da l√≥gica original
    barragem_analise = obter_barragem_analise(st.session_state['usuario_id'])
    if not barragem_analise:
        st.error("Selecione uma barragem para an√°lise primeiro")
        if st.button("‚Üê Voltar"):
            st.session_state['pagina'] = "principal"
            st.rerun()
        return
    
    st.subheader(f"Zonas da Barragem: {barragem_analise[1]} (ID: {barragem_analise[0]})")
    
    # Abas para diferentes funcionalidades
    tab1, tab2 = st.tabs(["üìã Lista de Zonas", "‚ûï Nova Zona"])
    
    with tab1:
        listar_zonas_barragem(barragem_analise[0])
    
    with tab2:
        cadastrar_zona_barragem(barragem_analise[0])
    
    if st.button("‚Üê Voltar para P√°gina Principal"):
        st.session_state['pagina'] = "principal"
        st.rerun()

# def gerenciar_zonas_barragem():
#     """P√°gina principal para gerenciamento de zonas e modos de falha"""
#     st.title("üèóÔ∏è Gerenciamento de Zonas de Barragem")
    
#     # Verifica se h√° uma barragem selecionada
#     barragem_analise = obter_barragem_analise(st.session_state['usuario_id'])
#     if not barragem_analise:
#         st.error("Selecione uma barragem para an√°lise primeiro")
#         if st.button("‚Üê Voltar"):
#             st.session_state['pagina'] = "principal"
#             st.rerun()
#         return
    
#     st.subheader(f"Zonas da Barragem: {barragem_analise[1]} (ID: {barragem_analise[0]})")
    
#     # Abas para diferentes funcionalidades
#     tab1, tab2, tab3 = st.tabs(["üìã Lista de Zonas", "‚ûï Nova Zona", "üß± Materiais"])
    
#     with tab1:
#         listar_zonas_barragem(barragem_analise[0])
    
#     with tab2:
#         cadastrar_zona_barragem(barragem_analise[0])
    
#     with tab3:
#         gerenciar_tipos_materiais()
    
#     if st.button("‚Üê Voltar para P√°gina Principal"):
#         st.session_state['pagina'] = "principal"
#         st.rerun()

# def listar_zonas_barragem(barragem_id):
#     """Lista zonas com a nova estrutura de colunas"""
#     zonas = obter_zonas_por_barragem(barragem_id)
#     print(zonas)
    
#     if not zonas:
#         st.info("Nenhuma zona cadastrada para esta barragem ainda.")
#         return
    
#     for zona in zonas:
#         with st.expander(f"Zona: {zona[4]} (ID: {zona[0]})"):  # √≠ndice 4 para nome
#             col1, col2 = st.columns([3, 1])
            
#             with col1:
#                 material = obter_material_por_id(zona[3])  # √≠ndice 3 para material_id
#                 print(material)
#                 st.write(f"**Material:** {material[2] if material else 'N√£o especificado'}")
#                 if zona[5]:  # √≠ndice 5 para descricao
#                     st.write(f"**Descri√ß√£o:** {zona[5]}")
                
#                 # modos_falha = obter_modos_falha_por_zona(zona[0])
#                 # if modos_falha:
#                 #     st.write("**Modos de Falha Associados:**")
#                 #     for modo in modos_falha:
#                 #         st.write(f"- {modo[1]}")

def listar_zonas_barragem(barragem_id):
    """Lista todas as zonas cadastradas para uma barragem espec√≠fica"""
    if not barragem_id:
        st.error("Nenhuma barragem selecionada")
        return
    
    zonas = obter_zonas_por_barragem(barragem_id)
    
    if not zonas:
        st.info("Nenhuma zona cadastrada para esta barragem ainda.")
        return
    
    for zona in zonas:
        with st.expander(f"Zona: {zona[4]} (ID: {zona[0]})"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                # Tratamento seguro para o material
                material = obter_material_por_id(zona[3])
                material_nome = 'N√£o especificado'
                if material:
                    try:
                        # Acessa o nome do material de forma segura
                        material_nome = material[2] if len(material) > 2 else material[1]
                    except (IndexError, TypeError):
                        material_nome = 'Desconhecido'
                
                st.write(f"**Material:** {material_nome}")
                
                if len(zona) > 5 and zona[5]:  # Verifica se existe descri√ß√£o
                    st.write(f"**Descri√ß√£o:** {zona[5]}")
                
                # Tratamento seguro para modos de falha
                # modos_falha = obter_modos_falha_por_zona(zona[0])
                # if modos_falha:
                #     st.write("**Modos de Falha Associados:**")
                #     for modo in modos_falha:
                #         try:
                #             st.write(f"- {modo[1]}")
                #         except (IndexError, TypeError):
                #             st.write("- Modo de falha desconhecido")

            with col2:
                if st.button("‚úèÔ∏è Editar", key=f"edit_zona_{zona[0]}"):
                    st.session_state['editar_zona_id'] = zona[0]
                    st.rerun()
                
                if st.button("üóëÔ∏è Excluir", key=f"del_zona_{zona[0]}"):
                    if excluir_zona_barragem(zona[0]):
                        st.rerun()

def cadastrar_zona_barragem(barragem_id):
    """Formul√°rio atualizado para nova estrutura"""
    with st.form("form_nova_zona", clear_on_submit=True):
        st.subheader("Cadastrar Nova Zona")
        
        # Sele√ß√£o de material primeiro (nova ordem)
        materiais = obter_todos_materiais()
        material_opcoes = {m[0]: m[2] for m in materiais} if materiais else {}
        
        material_id = st.selectbox(
            "Material Principal*",
            options=list(material_opcoes.keys()),
            format_func=lambda x: material_opcoes.get(x, "Selecione...")
        )
        
        nome = st.text_input("Nome da Zona*", max_chars=50)
        descricao = st.text_area("Descri√ß√£o T√©cnica")
        
        submitted = st.form_submit_button("Salvar Zona")
        
        if submitted:
            if not nome or not material_id:
                st.error("Preencha os campos obrigat√≥rios (*)")
            else:
                sucesso = cadastrar_zona_db(
                    usuario_id=st.session_state['usuario_id'],
                    barragem_id=barragem_id,
                    material_id=material_id,
                    nome=nome.strip(),
                    descricao=descricao.strip() if descricao else None
                )
                
                if sucesso:
                    st.success("Zona cadastrada com sucesso!")
                    time.sleep(1)
                    st.rerun()

def atualizar_zona_db(zona_id, material_id, nome, descricao=None):
    """
    Atualiza uma zona de barragem no banco de dados
    :param zona_id: ID da zona a ser atualizada
    :param material_id: ID do material associado
    :param nome: Nome da zona
    :param descricao: Descri√ß√£o t√©cnica (opcional)
    :return: True se atualizado com sucesso, False caso contr√°rio
    """
    conn = None
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Verifica se a zona existe
        cursor.execute("SELECT id FROM zonas_barragem WHERE id = ?", (zona_id,))
        if not cursor.fetchone():
            st.error("Zona n√£o encontrada")
            return False
        
        # Atualiza os dados
        cursor.execute("""
            UPDATE zonas_barragem 
            SET material_id = ?, nome = ?, descricao = ?
            WHERE id = ?
        """, (material_id, nome.strip(), descricao.strip() if descricao else None, zona_id))
        
        conn.commit()
        
        # Verifica se a atualiza√ß√£o foi bem-sucedida
        if cursor.rowcount == 1:
            st.success("Zona atualizada com sucesso!")
            return True
        else:
            st.error("Nenhuma altera√ß√£o realizada")
            return False
            
    except sqlite3.IntegrityError as e:
        if "FOREIGN KEY constraint failed" in str(e):
            st.error("Material selecionado n√£o existe")
        elif "UNIQUE constraint" in str(e):
            st.error("J√° existe uma zona com este nome")
        else:
            st.error(f"Erro de integridade no banco de dados: {str(e)}")
        return False
        
    except sqlite3.Error as e:
        st.error(f"Erro no banco de dados: {str(e)}")
        return False
        
    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        return False
        
    finally:
        if conn:
            try:
                conn.close()
            except:
                pass  # Garante que n√£o falhe ao fechar conex√£o

def excluir_zona_barragem(zona_id):
    """
    Exclui uma zona de barragem do sistema de forma segura
    :param zona_id: ID da zona a ser exclu√≠da
    :return: 
        - True se a exclus√£o foi bem-sucedida
        - False se houve falha ou a zona n√£o pode ser exclu√≠da
    """
    # Verifica√ß√£o inicial do ID
    try:
        zona_id = int(zona_id)
        if zona_id <= 0:
            st.error("ID da zona inv√°lido")
            return False
    except (ValueError, TypeError):
        st.error("ID da zona deve ser um n√∫mero inteiro positivo")
        return False

    conn = None
    try:
        conn = conectar_db()
        cursor = conn.cursor()

        # 1. Verifica se a zona existe
        cursor.execute("SELECT barragem_id FROM zonas_barragem WHERE id = ?", (zona_id,))
        resultado = cursor.fetchone()
        
        if not resultado:
            st.error("Zona n√£o encontrada")
            return False

        barragem_id = resultado[0]

        # 2. Verifica se existem modos de falha associados (se aplic√°vel)
        cursor.execute("SELECT COUNT(*) FROM modos_falha_zona WHERE zona_id = ?", (zona_id,))
        if cursor.fetchone()[0] > 0:
            st.error("N√£o √© poss√≠vel excluir: existem modos de falha associados a esta zona")
            return False

        # 3. Executa a exclus√£o
        cursor.execute("DELETE FROM zonas_barragem WHERE id = ?", (zona_id,))
        conn.commit()

        # Verifica se realmente excluiu
        if cursor.rowcount == 1:
            st.success(f"Zona {zona_id} da barragem {barragem_id} exclu√≠da com sucesso!")
            return True
        else:
            st.error("Nenhuma zona foi exclu√≠da")
            return False

    except sqlite3.Error as e:
        st.error(f"Erro no banco de dados: {str(e)}")
        return False

    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        return False

    finally:
        if conn:
            try:
                conn.close()
            except:
                pass  # Garante que n√£o falhe ao fechar conex√£o

def atualizar_zona_db(zona_id, material_id, nome, descricao=None):
    """
    Atualiza uma zona de barragem no banco de dados
    :param zona_id: ID da zona a ser atualizada
    :param material_id: ID do material associado
    :param nome: Nome da zona
    :param descricao: Descri√ß√£o t√©cnica (opcional)
    :return: True se atualizado com sucesso, False caso contr√°rio
    """
    conn = None
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Verifica se a zona existe
        cursor.execute("SELECT id FROM zonas_barragem WHERE id = ?", (zona_id,))
        if not cursor.fetchone():
            st.error("Zona n√£o encontrada")
            return False
        
        # Atualiza os dados
        cursor.execute("""
            UPDATE zonas_barragem 
            SET material_id = ?, nome = ?, descricao = ?
            WHERE id = ?
        """, (material_id, nome.strip(), descricao.strip() if descricao else None, zona_id))
        
        conn.commit()
        
        # Verifica se a atualiza√ß√£o foi bem-sucedida
        if cursor.rowcount == 1:
            st.success("Zona atualizada com sucesso!")
            return True
        else:
            st.error("Nenhuma altera√ß√£o realizada")
            return False
            
    except sqlite3.IntegrityError as e:
        if "FOREIGN KEY constraint failed" in str(e):
            st.error("Material selecionado n√£o existe")
        elif "UNIQUE constraint" in str(e):
            st.error("J√° existe uma zona com este nome")
        else:
            st.error(f"Erro de integridade no banco de dados: {str(e)}")
        return False
        
    except sqlite3.Error as e:
        st.error(f"Erro no banco de dados: {str(e)}")
        return False
        
    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        return False
        
    finally:
        if conn:
            try:
                conn.close()
            except:
                pass  # Garante que n√£o falhe ao fechar conex√£o

# def editar_zona_barragem(zona_id):
#     """Formul√°rio de edi√ß√£o atualizado"""
#     zona = obter_zona_por_id(zona_id)
#     if not zona:
#         st.error("Zona n√£o encontrada")
#         st.session_state.pop('editar_zona_id', None)
#         st.rerun()
    
#     with st.form("form_editar_zona"):
#         st.subheader(f"Editando Zona: {zona[4]}")  # √≠ndice 4 para nome
        
#         materiais = obter_todos_materiais()
#         material_opcoes = {m[0]: m[2] for m in materiais}
        
#         material_id = st.selectbox(
#             "Material Principal*",
#             options=list(material_opcoes.keys()),
#             index=list(material_opcoes.keys()).index(zona[3]),  # √≠ndice 3 para material_id
#             format_func=lambda x: material_opcoes.get(x, "Selecione...")
#         )
        
#         nome = st.text_input("Nome da Zona*", value=zona[4])  # √≠ndice 4 para nome
#         descricao = st.text_area("Descri√ß√£o T√©cnica", value=zona[5] if zona[5] else "")  # √≠ndice 5 para descricao
        
#         col1, col2 = st.columns(2)
#         with col1:
#             if st.form_submit_button("üíæ Salvar Altera√ß√µes"):
#                 if atualizar_zona_db(zona_id, material_id, nome, descricao):
#                     st.success("Zona atualizada!")
#                     time.sleep(1)
#                     st.session_state.pop('editar_zona_id', None)
#                     st.rerun()
#         with col2:
#             if st.button("‚ùå Cancelar"):
#                 st.session_state.pop('editar_zona_id', None)
#                 st.rerun()

def listar_zonas_barragem(barragem_id):
    """Lista todas as zonas cadastradas para uma barragem espec√≠fica"""
    if not barragem_id:
        st.error("Nenhuma barragem selecionada")
        return
    
    zonas = obter_zonas_por_barragem(barragem_id)
    
    if not zonas:
        st.info("Nenhuma zona cadastrada para esta barragem ainda.")
        return
    
    for zona in zonas:
        with st.expander(f"Zona: {zona[4]} (ID: {zona[0]})"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                material = obter_material_por_id(zona[3])
                material_nome = material[1] if material and len(material) > 1 else 'N√£o especificado'
                st.write(f"**Material:** {material_nome}")
                
                if len(zona) > 5 and zona[5]:
                    st.write(f"**Descri√ß√£o:** {zona[5]}")
                
                # modos_falha = obter_modos_falha_por_zona(zona[0])
                # if modos_falha:
                #     st.write("**Modos de Falha Associados:**")
                #     for modo in modos_falha:
                #         st.write(f"- {modo[1] if len(modo) > 1 else 'Modo desconhecido'}")

            with col2:
                if st.button("‚úèÔ∏è Editar", key=f"edit_zona_{zona[0]}"):
                    # Redireciona para a edi√ß√£o
                    st.session_state['pagina'] = "editar_zona"
                    st.session_state['zona_edit_id'] = zona[0]
                    st.rerun()
                
                if st.button("üóëÔ∏è Excluir", key=f"del_zona_{zona[0]}"):
                    if excluir_zona_barragem(zona[0]):
                        st.rerun()

def gerenciar_tipos_materiais():
    """Cadastro e listagem de tipos de materiais"""
    st.subheader("Tipos de Materiais")
    
    with st.expander("‚ûï Cadastrar Novo Material"):
        with st.form("form_novo_material"):
            nome = st.text_input("Nome do Material*", max_chars=50)
            descricao = st.text_area("Descri√ß√£o T√©cnica")
            
            if st.form_submit_button("Salvar Material"):
                if nome:
                    sucesso = cadastrar_material_db(
                        usuario_id=st.session_state['usuario_id'],
                        nome=nome.strip(),
                        descricao=descricao.strip() if descricao else None
                    )
                    if sucesso:
                        st.success("Material cadastrado!")
                        st.rerun()
                else:
                    st.error("Nome do material √© obrigat√≥rio")
    
    # Listagem de materiais existentes
    materiais = obter_todos_materiais()
    if materiais:
        st.write("**Materiais Cadastrados:**")
        for material in materiais:
            cols = st.columns([3, 1])
            cols[0].write(f"**{material[2]}** - {material[3] or 'Sem descri√ß√£o'}")
            
            if cols[1].button("Excluir", key=f"del_mat_{material[0]}"):
                if excluir_material_db(material[0]):
                    st.rerun()

def exibir_formulario_cadastro_barragem():
    """Exibe o formul√°rio padr√£o de cadastro de barragem"""
    # Voltar para p√°gina principal
    if st.button("‚¨ÖÔ∏è Voltar"):
        st.session_state['pagina'] = "principal"
        st.rerun()

    st.subheader("Informa√ß√µes B√°sicas")
    nome = st.text_input("Nome da Barragem*", placeholder="Ex: Barragem do Rio Preto")

    # Lista de tipos de barragem: (id, nome)
    tipos = obter_tipos_barragem()

    # Criar dicion√°rio nome -> id
    opcoes = {t[2]: t[0] for t in tipos}

    # Criar dicion√°rio inverso id -> nome (para uso no valor inicial)
    id_para_nome = {t[0]: t[2] for t in tipos}

    # Obter nome correspondente ao ID atual (ou "" se n√£o encontrado)
    tipo_nome_atual = id_para_nome.get(1, "")

    # Selectbox que mostra o nome e armazena o ID
    tipo_nome = st.selectbox(
        "Tipo de Barragem*",
        options=list(opcoes.keys()),
        index=list(opcoes.keys()).index(tipo_nome_atual) if tipo_nome_atual in opcoes else 0,
        help="Selecione o tipo construtivo da barragem"
    )

    # Recuperar o tipo_id correspondente ao nome selecionado
    tipo_id = opcoes[tipo_nome]

    localizacao = st.text_input("Localiza√ß√£o*", placeholder="Ex: Munic√≠pio/Estado")

    st.subheader("Dimens√µes")
    col1, col2 = st.columns(2)
    with col1:
        altura = st.number_input("Altura (m)*", min_value=0.0, step=0.1, format="%.1f", key="altura_input")
    with col2:
        comprimento = st.number_input("Comprimento (m)*", min_value=0.0, step=0.1, format="%.1f", key="comprimento_input")

    # C√°lculo din√¢mico da rela√ß√£o Corda/Altura
    if altura > 0:
        rel_cordaaltura = round(comprimento / altura, 1)
        st.success(f"üìê Rela√ß√£o Corda/Altura: **{rel_cordaaltura:.1f}**")
    else:
        rel_cordaaltura = 0.0
        st.warning("‚ö†Ô∏è Informe um valor de altura maior que zero para calcular a rela√ß√£o Corda/Altura.")

    # Formul√°rio de envio
    sucesso_cadastro = False
    with st.form("form_cadastro_barragem"):
        submitted = st.form_submit_button("Cadastrar Barragem")
        if submitted:
            if not nome or not tipo_id or not localizacao or altura == 0 or comprimento == 0:
                st.error("Preencha todos os campos obrigat√≥rios (*) e certifique-se de que altura e comprimento sejam maiores que zero.")
            else:
                try:
                    cadastrar_barragem(
                        st.session_state['usuario_id'],
                        nome,
                        tipo_id,
                        localizacao,
                        altura,
                        comprimento,
                        rel_cordaaltura
                    )
                    st.success("‚úÖ Barragem cadastrada com sucesso!")
                    sucesso_cadastro = True
                except Exception as e:
                    st.error(f"Erro ao cadastrar barragem: {str(e)}")

    # Bot√£o externo ao formul√°rio (ativado apenas ap√≥s sucesso)
    if sucesso_cadastro:
        if st.button("üìå Definir como Barragem em An√°lise"):
            barragens = obter_barragens_usuario(st.session_state['usuario_id'])
            if barragens:
                ultima_barragem = barragens[-1][0]
                definir_barragem_analise(st.session_state['usuario_id'], ultima_barragem)
                st.success("Barragem definida para an√°lise!")
                st.session_state['pagina'] = "principal"
                st.rerun()

def cadastrar_tipo_barragem_db(usuario_id, nome, descricao, referencia_tecnica=None, image_path=None):
    """
    Cadastra novo tipo de barragem com tratamento completo de erros e valida√ß√µes
    Retorna:
        - ID do novo registro se bem-sucedido
        - None em caso de falha
    """
    conn = None
    try:
        # Valida√ß√µes iniciais
        if not nome or not isinstance(nome, str) or len(nome.strip()) == 0:
            st.error("Nome do tipo de barragem √© obrigat√≥rio")
            return None
            
        if len(nome.strip()) > 50:
            st.error("Nome deve ter no m√°ximo 50 caracteres")
            return None
            
        if not descricao or len(descricao.strip()) == 0:
            st.error("Descri√ß√£o t√©cnica √© obrigat√≥ria")
            return None

        # Conecta ao banco de dados
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Verifica se j√° existe um tipo com o mesmo nome
        cursor.execute("SELECT id FROM tipos_barragem WHERE nome = ?", (nome.strip(),))
        if cursor.fetchone():
            st.error("J√° existe um tipo de barragem com este nome")
            return None
        
        # Insere o novo registro
        cursor.execute("""
            INSERT INTO tipos_barragem 
            (usuario_id, nome, descricao, referencia_tecnica, image_path)
            VALUES (?, ?, ?, ?, ?)
        """, (
            usuario_id,
            nome.strip(),
            descricao.strip(),
            referencia_tecnica.strip() if referencia_tecnica else None,
            image_path if image_path and os.path.exists(image_path) else None
        ))
        
        conn.commit()
        
        # Retorna o ID do novo registro
        novo_id = cursor.lastrowid
        st.success(f"Tipo de barragem cadastrado com sucesso! (ID: {novo_id})")
        return novo_id
        
    except sqlite3.IntegrityError as e:
        st.error(f"Erro de integridade no banco de dados: {str(e)}")
        return None
        
    except sqlite3.Error as e:
        st.error(f"Erro no banco de dados: {str(e)}")
        return None
        
    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        return None
        
    finally:
        if conn:
            try:
                conn.close()
            except:
                pass  # Garante que n√£o falhe ao fechar conex√£o

def adicionar_tipo_barragem():
    """
    P√°gina para cadastro de novos tipos de barragem
    - Acesso restrito a administradores
    - Integrado com a estrutura revisada da tabela tipos_barragem
    """
    
    st.title("üìù Cadastrar Novo Tipo de Barragem")
    
    # Verifica√ß√£o de permiss√£o
    if not st.session_state.get('is_admin'):
        st.error("‚õî Acesso permitido apenas para administradores")
        if st.button("‚Üê Voltar"):
            st.session_state['pagina'] = "principal"
            st.rerun()
        return
    
    with st.form("novo_tipo_barragem", clear_on_submit=True):
        # Campos obrigat√≥rios
        nome = st.text_input("Nome do Tipo*", 
                           help="Nome t√©cnico do tipo de barragem (ex: 'Terra Homog√™nea')")
        
        descricao = st.text_area("Descri√ß√£o T√©cnica*", height=120,
                               help="Caracter√≠sticas construtivas e t√©cnicas relevantes")
        
        # Campos opcionais
        referencia = st.text_input("Refer√™ncia Normativa",
                                 help="Norma t√©cnica ou documento de refer√™ncia (ex: 'ABNT NBR 15421')")
        
        imagem = st.file_uploader("Imagem Representativa (opcional)",
                                type=["jpg", "jpeg", "png"],
                                help="Upload de imagem ilustrativa (m√°x. 5MB)")
        
        submitted = st.form_submit_button("Salvar Novo Tipo")
        
        if submitted:
            # Valida√ß√£o dos campos obrigat√≥rios
            if not nome.strip() or not descricao.strip():
                st.error("Preencha todos os campos obrigat√≥rios (*)")
            elif len(nome.strip()) > 50:  # Valida√ß√£o manual do comprimento m√°ximo
                st.error("O nome deve ter no m√°ximo 50 caracteres")
            else:
                try:
                    # Processamento da imagem
                    caminho_imagem = None
                    if imagem is not None:
                        # Verifica tamanho do arquivo (m√°x 5MB)
                        if imagem.size > 5 * 1024 * 1024:
                            st.error("Arquivo muito grande (tamanho m√°ximo: 5MB)")
                            return
                        
                        # Cria diret√≥rio se n√£o existir
                        os.makedirs("uploads/tipos_barragem", exist_ok=True)
                        
                        # Gera nome √∫nico para o arquivo
                        extensao = os.path.splitext(imagem.name)[1].lower()
                        nome_arquivo = f"tipo_{nome.lower().replace(' ', '_')}_{int(time.time())}{extensao}"
                        caminho_imagem = f"uploads/tipos_barragem/{nome_arquivo}"
                        
                        # Salva o arquivo
                        with open(caminho_imagem, "wb") as f:
                            f.write(imagem.getbuffer())
                    
                    # Cadastra no banco de dados
                    sucesso = cadastrar_tipo_barragem_db(
                        usuario_id=st.session_state['usuario_id'],
                        nome=nome.strip(),
                        descricao=descricao.strip(),
                        referencia_tecnica=referencia.strip() if referencia else None,
                        image_path=caminho_imagem
                    )
                    
                    if sucesso:
                        st.success("‚úÖ Tipo de barragem cadastrado com sucesso!")
                        time.sleep(1.5)
                        st.session_state['pagina'] = "lista_tipos_barragem"
                        st.rerun()
                    else:
                        st.error("Erro: Tipo de barragem j√° existe ou dados inv√°lidos")
                        
                except Exception as e:
                    st.error(f"Falha no cadastro: {str(e)}")
                    # Limpeza em caso de falha
                    if caminho_imagem and os.path.exists(caminho_imagem):
                        os.remove(caminho_imagem)
    
    # Rodap√© com a√ß√µes
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("‚Üê Voltar"):
            st.session_state['pagina'] = "lista_tipos_barragem"
            st.rerun()
    with col2:
        st.caption("Campos marcados com (*) s√£o obrigat√≥rios")

def listar_tipos_barragem():
    """P√°gina para listagem segura dos tipos de barragem com tratamento completo de imagens"""
    st.title("üìã Tipos de Barragem Cadastrados")
    
    # Carrega os tipos do banco de dados
    tipos = obter_tipos_barragem()
    
    if not tipos:
        st.warning("Nenhum tipo de barragem cadastrado ainda.")
    else:
        for i, tipo in enumerate(tipos):
            with st.expander(f"{tipo[2]} (ID: {tipo[0]})"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Descri√ß√£o:** {tipo[3]}")
                    if tipo[3]:
                        st.write(f"**Refer√™ncia:** {tipo[4]}")
                    
                    # Tratamento avan√ßado para exibi√ß√£o de imagens
                    if tipo[4]:  # Se h√° image_path definido
                        exibir_imagem_segura(tipo[5], tipo[2])
                    else:
                        st.info("‚ÑπÔ∏è Nenhuma imagem cadastrada para este tipo")
                
                with col2:
                    if st.session_state.get('is_admin'):
                        if st.button("üóëÔ∏è Excluir", key=f"del_tipo_{tipo[0]}_{i}"):
                            if excluir_tipo_barragem(tipo[0]):
                                st.rerun()
    
    # Rodap√© com a√ß√µes
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar", key="voltar_lista_tipos"):
            st.session_state['pagina'] = "principal"
            st.rerun()
    with col2:
        if st.session_state.get('is_admin'):
            if st.button("‚ûï Adicionar Novo Tipo", key="add_novo_tipo"):
                st.session_state['pagina'] = "adicionar_tipo_barragem"
                st.rerun()

def exibir_imagem_segura(caminho_imagem, nome_tipo):
    """
    Exibe uma imagem com tratamento completo de erros
    :param caminho_imagem: Caminho da imagem a ser exibida
    :param nome_tipo: Nome do tipo para mensagens de erro
    """
    print(caminho_imagem)
    try:
        # Verifica se o caminho √© uma URL
        if isinstance(caminho_imagem, str) and caminho_imagem.startswith(('http://', 'https://')):
            st.image(caminho_imagem, width=200, caption=f"Imagem: {nome_tipo}")
            return
        
        # Verifica se o arquivo existe localmente
        if not os.path.exists(caminho_imagem):
            st.warning(f"‚ö†Ô∏è Imagem n√£o encontrada no caminho: {caminho_imagem}")
            return
        
        # Verifica se √© um arquivo de imagem v√°lido
        extensoes_validas = ('.png', '.jpg', '.jpeg', '.gif', '.bmp')
        if not caminho_imagem.lower().endswith(extensoes_validas):
            st.warning(f"‚ö†Ô∏è Formato de imagem n√£o suportado: {caminho_imagem}")
            return
        
        # Tenta exibir a imagem
        st.image(caminho_imagem, width=200, caption=f"Imagem: {nome_tipo}")
        
    except Exception as e:
        st.error(f"‚õî Erro ao carregar imagem: {str(e)}")
        st.info("‚ÑπÔ∏è Entre em contato com o administrador para corrigir este registro")

def excluir_tipo_barragem(tipo_id):
    """
    Exclui um tipo de barragem do sistema
    :param tipo_id: ID do tipo a ser exclu√≠do
    :return: True se bem-sucedido, False caso contr√°rio
    """
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Primeiro verifica se existem barragens usando este tipo
        cursor.execute("SELECT COUNT(*) FROM barragens WHERE tipo_id = ?", (tipo_id,))
        count = cursor.fetchone()[0]
        
        if count > 0:
            st.error("N√£o √© poss√≠vel excluir: existem barragens cadastradas com este tipo")
            return False
        
        # Exclui o registro
        cursor.execute("DELETE FROM tipos_barragem WHERE id = ?", (tipo_id,))
        conn.commit()
        
        # Verifica se realmente foi exclu√≠do
        if cursor.rowcount == 1:
            st.success("Tipo de barragem exclu√≠do com sucesso!")
            return True
        else:
            st.error("Tipo de barragem n√£o encontrado")
            return False
            
    except sqlite3.Error as e:
        st.error(f"Erro ao excluir tipo de barragem: {str(e)}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def editar_barragem(barragem):
    """Formul√°rio para edi√ß√£o de barragem existente"""
    with st.form("editar_barragem_form"):
        nome = st.text_input("Nome", value=barragem[2])


        # Lista de tipos de barragem: (id, nome)
        tipos = obter_tipos_barragem()

        # Criar dicion√°rio nome -> id
        opcoes = {t[2]: t[0] for t in tipos}

        # Criar dicion√°rio inverso id -> nome (para uso no valor inicial)
        id_para_nome = {t[0]: t[2] for t in tipos}

        # tipo_id previamente armazenado
    
        tipo_id_atual = barragem[3]

        # Obter nome correspondente ao ID atual (ou "" se n√£o encontrado)
        tipo_nome_atual = id_para_nome.get(tipo_id_atual, "")

        # Selectbox que mostra o nome e armazena o ID
        tipo_nome = st.selectbox(
            "Tipo de Barragem*",
            options=list(opcoes.keys()),
            index=list(opcoes.keys()).index(tipo_nome_atual) if tipo_nome_atual in opcoes else 0,
            help="Selecione o tipo construtivo da barragem"
        )

        # Recuperar o tipo_id correspondente ao nome selecionado
        tipo_id = opcoes[tipo_nome]

        localizacao = st.text_input("Localiza√ß√£o", value=barragem[4])
        altura = st.number_input("Altura (m)", value=barragem[5], min_value=0.0)
        comprimento = st.number_input("Comprimento (m)", value=barragem[6], min_value=0.0)
        rel_cordaaltura = st.number_input("Rela√ß√£o Corda/Altura", value=barragem[7], min_value=0.0)
        
        col1, col2, col3 = st.columns(3)
        with col2:
            submitted1 = st.form_submit_button("üóëÔ∏è Excluir")
            if submitted1:
                excluir_barragem(barragem[0])
                st.success("Barragem excluida com sucesso!")
                st.rerun()

        with col3:
            submitted = st.form_submit_button("Salvar Altera√ß√µes")
            if submitted:
                atualizar_barragem(
                    barragem[0], nome, tipo_id, localizacao, altura, comprimento, rel_cordaaltura
                )
                st.success("Barragem atualizada com sucesso!")
                st.rerun()
       
def mostrar_lista_barragens(barragens):
    """Mostra lista de barragens com exclus√£o segura"""
    st.subheader("üìã Lista de Barragens Cadastradas")
    
    if not barragens:
        st.warning("Nenhuma barragem cadastrada")
        return

    for barragem in barragens:
        barragem_id = barragem[0]
        nome_barragem = barragem[1]

        with st.expander(f"{nome_barragem} (ID: {barragem_id})"):
            st.write(f"**Tipo:** {barragem[2]}")
            st.write(f"**Localiza√ß√£o:** {barragem[3]}")
            st.write(f"**Altura:** {barragem[4]} m")
            st.write(f"**Comprimento:** {barragem[5]} m")

            col1, col2 = st.columns(2)
            with col1:
                if st.button("Selecionar para An√°lise", key=f"select_{barragem_id}"):
                    definir_barragem_analise(st.session_state['usuario_id'], barragem_id)
                    st.success(f"‚úÖ Barragem **{barragem_nome}** selecionada para an√°lise!")
                    st.rerun()

            with col2:
                if st.button("üóëÔ∏è Excluir", key=f"delete_{barragem_id}"):
                    st.session_state[f'confirm_{barragem_id}'] = True
                    st.rerun()

    """P√°gina para cadastro e gest√£o de zonas da barragem"""
    st.title("üèóÔ∏è Gerenciamento de Zonas da Barragem")

    from db import (
        obter_barragem_analise, obter_tipos_materiais_usuario,
        cadastrar_zona, obter_zonas_barragem, excluir_zona
    )

    # Obter barragem em an√°lise
    barragem = obter_barragem_analise(st.session_state['usuario_id'])
    if not barragem:
        st.error("Selecione uma barragem para an√°lise primeiro.")
        if st.button("‚¨ÖÔ∏è Voltar"):
            st.session_state['pagina'] = "principal"
            st.rerun()
        return

    barragem_id = barragem[0]
    st.info(f"Barragem em an√°lise: {barragem[1]}")

    # Carregar materiais do usu√°rio
    materiais = obter_tipos_materiais_usuario(st.session_state['usuario_id'])
    if not materiais:
        st.warning("Cadastre pelo menos um tipo de material antes de continuar.")
        if st.button("üß± Ir para Cadastro de Materiais"):
            st.session_state['pagina'] = "gerenciar_materiais"
            st.rerun()
        return

    opcoes_materiais = {m[0]: m[1] for m in materiais}

    # Formul√°rio de cadastro de zona
    st.subheader("‚ûï Cadastrar Nova Zona")
    with st.form("form_cadastro_zona"):
        nome = st.text_input("Nome da Zona*")
        material_id = st.selectbox(
            "Tipo de Material",
            options=list(opcoes_materiais.keys()),
            format_func=lambda x: opcoes_materiais[x]
        )
        submitted = st.form_submit_button("Cadastrar Zona")

        if submitted:
            if not nome.strip():
                st.error("Digite um nome para a zona.")
            else:
                cadastrar_zona(
                    st.session_state['usuario_id'],
                    barragem_id,
                    nome,
                    material_id
                )
                st.success("Zona cadastrada com sucesso!")
                st.rerun()

    # Lista de zonas j√° cadastradas
    st.subheader("üìã Zonas Cadastradas")
    zonas = obter_zonas_barragem(barragem_id)
    if zonas:
        for zona in zonas:
            col1, col2 = st.columns([4, 1])
            with col1:
                material_nome = opcoes_materiais.get(zona[3], "Desconhecido")
                st.markdown(f"**{zona[2]}** - Material: {material_nome}")
            with col2:
                if st.button("üóëÔ∏è Excluir", key=f"excluir_zona_{zona[0]}"):
                    excluir_zona(zona[0])
                    st.success("Zona exclu√≠da!")
                    st.rerun()
    else:
        st.info("Nenhuma zona cadastrada ainda.")

    # Bot√µes extras
    if st.button("üß± Gerenciar Materiais"):
        st.session_state['pagina'] = "gerenciar_materiais"
        st.rerun()

    if st.button("‚¨ÖÔ∏è Voltar"):
        st.session_state['pagina'] = "principal"
        st.rerun()

# ---------- Fun√ß√µes Utilit√°rias ----------
def email_valido(email):
    """Valida o formato do email"""
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

# ---------- P√°ginas ----------
def pagina_cadastro():
    """P√°gina de cadastro de novos usu√°rios"""
    st.subheader("üìù Cadastro de Novo Usu√°rio")
    proximo_codigo = obter_proximo_codigo_usuario()

    with st.form("cadastro_form"):
        col1, col2 = st.columns(2)
        with col1:
            st.text_input("C√≥digo do Usu√°rio", value=proximo_codigo, disabled=True)
            nome = st.text_input("Nome Completo", max_chars=100)
            funcao = st.text_input("Fun√ß√£o/Cargo", max_chars=50)
            organizacao = st.text_input("Organiza√ß√£o", max_chars=100)

        with col2:
            email = st.text_input("Email", max_chars=100)
            senha = st.text_input("Senha", type="password", max_chars=50)
            confirmar_senha = st.text_input("Confirmar Senha", type="password", max_chars=50)
            ativo = st.selectbox("Usu√°rio Ativo?", ["sim", "n√£o"])

        enviar = st.form_submit_button("Cadastrar")

        if enviar:
            if not email_valido(email):
                st.error("‚ùå Email inv√°lido.")
            elif senha != confirmar_senha:
                st.error("‚ùå As senhas n√£o coincidem.")
            elif len(senha) < 6:
                st.error("‚ùå A senha deve ter pelo menos 6 caracteres.")
            elif email_existe(email):
                st.warning("‚ö†Ô∏è Este email j√° est√° cadastrado.")
            else:
                if criar_usuario(proximo_codigo, nome, email, funcao, organizacao, senha, ativo):
                    st.success(f"‚úÖ Usu√°rio '{nome}' cadastrado com sucesso!")
                    st.balloons()
                else:
                    st.error("‚ùå Erro ao cadastrar usu√°rio.")

def pagina_admin_usuarios():
    """P√°gina de administra√ß√£o de usu√°rios"""
    st.title("üë• Administra√ß√£o de Usu√°rios")
    
    # Lista de usu√°rios em formato de tabela edit√°vel
    usuarios = listar_usuarios()
    
    if not usuarios.empty:
        # Exibir tabela com op√ß√µes de edi√ß√£o
        for _, usuario in usuarios.iterrows():
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                st.write(f"**{usuario['nome']}**")
                st.caption(f"Email: {usuario['email']}")
                st.caption(f"Criado em: {usuario['data_criacao']}")
            
            with col2:
                novo_status = st.selectbox(
                    "Status",
                    ["sim", "n√£o"],
                    index=0 if usuario['ativo'] == "sim" else 1,
                    key=f"status_{usuario['codigo']}"
                )
                if novo_status != usuario['ativo']:
                    if st.button("Atualizar Status", key=f"upd_status_{usuario['codigo']}"):
                        if atualizar_status_usuario(usuario['codigo'], novo_status):
                            st.success("Status atualizado!")
                            st.rerun()
            
            with col3:
                admin_status = st.checkbox(
                    "Administrador",
                    value=bool(usuario['is_admin']),
                    key=f"admin_{usuario['codigo']}"
                )
                if admin_status != usuario['is_admin']:
                    if st.button("Atualizar Acesso", key=f"upd_admin_{usuario['codigo']}"):
                        if atualizar_admin_usuario(usuario['codigo'], int(admin_status)):
                            st.success("Acesso atualizado!")
                            st.rerun()
            
            with col4:
                if usuario['email'] != "admin@insid.com":  # N√£o permitir excluir o admin principal
                    if st.button("Excluir", key=f"del_{usuario['codigo']}"):
                        if excluir_usuario(usuario['codigo']):
                            st.success("Usu√°rio exclu√≠do!")
                            st.rerun()
                else:
                    st.write("")  # Espa√ßo vazio para alinhamento
    else:
        st.warning("Nenhum usu√°rio cadastrado.")

    # Adicionar espa√ßo e bot√£o de voltar
    st.write("")
    if st.button("‚¨ÖÔ∏è Voltar"):
        st.session_state['pagina'] = "principal"
        st.rerun()

def pagina_login():
    """P√°gina de login"""
    st.title("üîê Bem-vindo ao Sistema inSID")

    col1, col2 = st.columns([1, 2])
    with col1:
        st.image("inSID_logo.jpg", caption="Metodologia inSID", width=150)
    with col2:
        with st.form("login_form"):
            email = st.text_input("E-mail")
            senha = st.text_input("Senha", type="password")
            entrar = st.form_submit_button("Entrar")

            if entrar:
                resultado = verificar_credenciais(email, senha)
                if resultado:
                    usuario_id, nome, is_admin = resultado
                    st.session_state.update({
                        'logado': True,
                        'email': email,
                        'usuario_id': usuario_id,
                        'usuario_nome': nome,
                        'is_admin': bool(is_admin)
                    })
                    st.success(f"‚úÖ Bem-vindo, {nome}!")
                    st.rerun()
                else:
                    st.error("‚ùå Credenciais inv√°lidas ou usu√°rio inativo.")

def logout():
    """Limpa a sess√£o e volta para o login"""
    st.session_state.clear()
    st.rerun()

def main():
    """Fun√ß√£o principal que controla o fluxo do aplicativo"""
    if 'logado' not in st.session_state:
        st.session_state['logado'] = False
        st.session_state['pagina'] = "login"

    if not st.session_state['logado']:
        tab1, tab2 = st.tabs(["üîë Login", "üìù Cadastro"])
        with tab1:
            pagina_login()
        with tab2:
            pagina_cadastro()
    else:
        if st.session_state.get('pagina') == "cadastro_barragem":
            pagina_cadastro_barragem()
        elif st.session_state.get('pagina') == "admin_usuarios" and st.session_state.get('is_admin'):
            pagina_admin_usuarios()
        elif st.session_state.get('pagina') == "identificacao_falhas":
            pagina_identificacao_falhas()
        else:
            pagina_principal()

if __name__ == "__main__":
    main()